@page "/"
@using System.Timers

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row mt-2">
        <div class="col-sm-6">
            <h5>How many rounds you want to play:</h5>
        </div>
        <div class="col-sm-6">
            <input type="text" placeholder="Enter Number" @onchange="UpdateTotalRounds" />
        </div>
    </div>

    <div class="row mt-2">
        <div class="col-sm-6">
            <p style="color:red">Total Rounds: @number</p>
        </div>
        <div class="col-sm-6">
            <p style="color:red">Finished Round: @counter</p>
        </div>
    </div>

    <div class="row">

        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++) /*using for loop instead of foreach loop*/
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))" type="button" class="btn btn-outline-dark">
                    <h1>@animal</h1>
                </button>
            </div>
        }
    </div>

    <!--This Razor markup uses matchesFound to make the page display the number of matches found underneath the grid of buttons-->
    <div class="row">
        <p>Matches found: @matchesFound</p>
    </div>

    <div class="row" hidden="@isShow">
        <h1 style="color:red">YOU WIN!</h1>
    </div>

    <div class="row">
        <h2>Time Left: @timeDisplay</h2>
    </div>
</div>

@code{
    List<string> animalEmoji = new List<string>()
{
        "🐶","🐶",
        "🐺","🐺",
        "🦊","🦊",
        "🐮","🐮",
        "🐱","🐱",
        "🦁","🦁",
        "🐯","🐯",
        "🐹","🐹",
    };

    List<string> shuffledAnimals = new List<string>();

    //set up trackers which is going to track the number of matches the player's found
    int matchesFound = 0;

    //Set up the timer
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;

        SetUpGame();
    }

    //Set up the counter to track the Total game rounds
    int counter = 0;
    bool isShow = true;

    private void SetUpGame()
    {
        Random random = new Random();
        shuffledAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();

        //when the game is set up or reset, it resets the number of matches back to zero
        matchesFound = 0;


        //when the rounds achived the total amount rounds, display the win message
        if (counter == number)
        {
            isShow = false;
        }

        tenthsOfSecondsElapsed = 150;
    }


    //Track the user inputs(total game rounds)
    public string totalRounds = " ";
    public int number = 1;
    private void UpdateTotalRounds(ChangeEventArgs e)
    {
        totalRounds = e.Value.ToString();

        //default the rounds with out user inputs
        if (Convert.ToInt32(totalRounds) == 0)
        {
            number = 1;
        }

        //convert the user inputs to int
        else
        {
            number = Convert.ToInt32(totalRounds);
        }

    }

    string lastAnimalFound = string.Empty;

    // Add "tag" for each gameobject
    string lastDescription = string.Empty;

    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            timer.Start();
        }

        // new conditions : only the same emoji but with different "worldsapce" will be matched
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found & Replace for next pair
            lastAnimalFound = string.Empty;

            // Replace found animals with empty string to hide them
            shuffledAnimals = shuffledAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();

            //Every time the player finds a match this block adds 1 to matchesFound. If all 8 matches are found, it resets the game
            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += "- Play Again?";

                counter++;
                SetUpGame();

            }
        }

        else
        {
            // Reset the first selected emoji
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed--;
            timeDisplay = (tenthsOfSecondsElapsed / 10f).ToString("0.0s");
            if(tenthsOfSecondsElapsed <= 0)
            {
                SetUpGame();
            }
            StateHasChanged();
        });
    }
}